server:
  port: 8080
#defaults
spring.cloud.stream.kafka.streams.binder:
  brokers: broker1, broker2, broker3
  configuration:
   processing.guarantee: exactly_once
   commit.interval.ms: 1000
   default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
   default.value.serde: org.apache.kafka.common.serialization.Serdes$LongSerde

#user register in
spring.cloud.stream.bindings.urin:
  destination: kafka-stream_USER
  group: user
  consumer:
    headerMode: raw

#user register out
spring.cloud.stream.bindings.urot:
  destination: user-register-counts
  producer:
    useNativeEncoding: true
    headerMode: raw

spring.cloud.stream.kafka.streams.bindings.urot.producer:
    keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
    valueSerde: org.apache.kafka.common.serialization.Serdes$LongSerde


#Game transaction in
spring.cloud.stream.bindings.gtin:
  destination: kafka-stream_GAME_TRANSACTION
  group: gametransaction
  consumer:
    headerMode: raw

#Game 10 mins windowed out
spring.cloud.stream.bindings.gtot:
  destination: game_transaction_10_mins_windowed
  producer:
    useNativeEncoding: true
    headerMode: raw

spring.cloud.stream.kafka.streams.bindings.gtot.producer:
    keySerde: org.apache.kafka.common.serialization.Serdes$LongSerde
    valueSerde: org.springframework.kafka.support.serializer.JsonSerde


logging:
  info: true
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

#logging:
## Log levels severity mapping
#  level:
#    org:
#      springframework: INFO
#      apache.kafka: DEBUG
#    kafka: DEBUG

